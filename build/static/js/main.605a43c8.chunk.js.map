{"version":3,"sources":["components/Searchbox.js","components/Card.js","components/List.js","components/Scroll.js","containers/ErrorCatcher.js","actions.js","constants.js","containers/App.js","serviceWorker.js","reducers.js","index.js"],"names":["Searchbox","searchChange","className","type","placeholder","onChange","Card","name","user","id","alt","src","List","robots","map","i","key","username","Scroll","props","style","overflowY","border","height","borderBottom","children","ErrorCatcher","state","hasError","error","info","this","setState","Component","requestRobots","dispatch","fetch","then","response","json","data","payload","catch","App","onrequestRobots","searchField","onSearchChange","isPending","isError","fr","filter","_","toLowerCase","includes","paddingBottom","connect","searchRobots","event","target","value","Boolean","window","location","hostname","match","initialStateS","initialStateR","rootReducer","combineReducers","action","Object","assign","logger","createLogger","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.605a43c8.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Searchbox = ({searchChange}) => {\r\n    return (\r\n        <div  className='tc'>\r\n            <input type='search'  placeholder='Search Robots' onChange={searchChange}/><br/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Searchbox","import React from 'react';\r\n\r\nconst Card =({name , user , id})=> {\r\n    return(\r\n            <div className='tc bg-light-green dib br3 pa2 ma2 grow bw2 shadow-5'>\r\n                <img alt='ph' src={`https://robohash.org/${id+12}/?100x100`} />\r\n                <div>\r\n                    <h2>{name}</h2>\r\n                    <p>{user}@altruy.com</p>\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n}\r\n\r\nexport default Card","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst List = ({robots}) =>{\r\n    return (\r\n        <div className='tc'>\r\n            {robots.map((user ,i) => {\r\n                return <Card key ={i} name={robots[i].name} user={robots[i].username} id={robots[i].id}/>})} \r\n                \r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default List","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return(\r\n        <div style={{overflowY:'scroll',border:'1px solid black',height:'75vh',borderBottom:'3vh solid black'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll","import  React, {Component} from 'react';\r\n\r\nclass ErrorCatcher extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            hasError:false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error,info){\r\n        this.setState({hasError:true});\r\n    }\r\n\r\n    render(){\r\n        return this.state.hasError ? <h1>There has been an error</h1> : this.props.children\r\n    }\r\n\r\n}\r\n\r\nexport default ErrorCatcher","import { CHANGE_SEARCH_FIELD , REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_FAILED, REQUEST_ROBOTS_SUCCESS } from \"./constants\"\r\n\r\nexport const setSearchField = (text) => ({\r\n    type : CHANGE_SEARCH_FIELD,\r\n    payload : text\r\n})\r\n\r\nexport const requestRobots = (dispatch)=>{\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response=> response.json())\r\n    .then(data=>dispatch({type:REQUEST_ROBOTS_SUCCESS, payload:data}))\r\n    .catch(error=>dispatch({type:REQUEST_ROBOTS_FAILED , payload:error}))\r\n}","export const CHANGE_SEARCH_FIELD ='CHANGE_SEARCH_FIELD';\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n","import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport './App.css';\r\nimport Searchbox from '../components/Searchbox';\r\nimport List from '../components/List';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorCatcher from './ErrorCatcher';\r\n\r\nimport {setSearchField, requestRobots} from '../actions'\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending : state.requestRobots.isPending,\r\n    isError : state.requestRobots.isError\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSearchChange:(event) => dispatch(setSearchField(event.target.value)),\r\n    onrequestRobots: () => dispatch(requestRobots)\r\n    \r\n  }\r\n}\r\n\r\nclass App extends Component {\r\n  componentDidMount(){\r\n    this.props.onrequestRobots();\r\n  }\r\n\r\n\r\n  render(){\r\n    const {robots , searchField , onSearchChange , isPending, isError} = this.props;\r\n    const fr= robots.filter(_ =>{\r\n      return _.name.toLowerCase().includes(searchField.toLowerCase());\r\n    })\r\n    if (isError) return <h1 className='tc'>There has been an error</h1>\r\n    return isPending?\r\n      <h1 className='tc'>Loading.. pls wait..</h1>\r\n      :<>\r\n      <div style={{height:'22vh'}}>\r\n        <h1 className='tc'>Look for Ur friend Robot</h1>\r\n        <div style={{paddingBottom:'1rem'}}>\r\n          <Searchbox searchChange={onSearchChange} />\r\n        </div>\r\n      </div>\r\n      <Scroll>\r\n        <ErrorCatcher>\r\n          <List robots={fr} />\r\n        </ErrorCatcher>\r\n      </Scroll>\r\n      </>\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED ,} from './constants'\r\nconst initialStateS = {\r\n    searchField:'',\r\n}\r\n\r\nexport const searchRobots = (state=initialStateS,action={}) => {\r\n    switch(action.type){\r\n        case CHANGE_SEARCH_FIELD: \r\n            return Object.assign({}, state , {searchField: action.payload});\r\n\r\n        default:\r\n            return state;\r\n\r\n    }\r\n} \r\n\r\nconst initialStateR ={\r\n    robots:[],\r\n    isPending:false,\r\n    isError:false\r\n}\r\n\r\nexport const requestRobots = (state=initialStateR,action={}) => {\r\n    switch(action.type){\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return {...state , isPending: true ,isError: false};\r\n\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return {...state , robots: action.payload , isPending: false , isError: false};\r\n\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return {...state , isError: true , isPending:false};\r\n\r\n        default:\r\n            return state;\r\n\r\n    }\r\n} ","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Provider} from 'react-redux';\r\nimport { createStore, applyMiddleware , combineReducers} from 'redux';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\nimport { searchRobots,requestRobots } from './reducers';\r\nimport {createLogger} from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk'\r\n\r\nconst rootReducer = combineReducers({ searchRobots,requestRobots });\r\nconst logger = createLogger();\r\nconst store = createStore(rootReducer , applyMiddleware(thunkMiddleware ,logger));\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}